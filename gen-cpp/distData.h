/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef distData_H
#define distData_H

#include <thrift/TDispatchProcessor.h>
#include "comProto_types.h"

namespace comProto {

class distDataIf {
 public:
  virtual ~distDataIf() {}
  virtual void runCmd(result& _return, const std::string& command) = 0;
  virtual void runCmdWParms(result& _return, const execWParms& command) = 0;
  virtual int32_t ping() = 0;
  virtual void listFilesDir(directory& _return, const std::string& DirPath, const std::string& workingDir) = 0;
  virtual void mvFile(result& _return, const std::string& FileName, const std::string& workingDir, const std::string& newFile) = 0;
};

class distDataIfFactory {
 public:
  typedef distDataIf Handler;

  virtual ~distDataIfFactory() {}

  virtual distDataIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(distDataIf* /* handler */) = 0;
};

class distDataIfSingletonFactory : virtual public distDataIfFactory {
 public:
  distDataIfSingletonFactory(const boost::shared_ptr<distDataIf>& iface) : iface_(iface) {}
  virtual ~distDataIfSingletonFactory() {}

  virtual distDataIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(distDataIf* /* handler */) {}

 protected:
  boost::shared_ptr<distDataIf> iface_;
};

class distDataNull : virtual public distDataIf {
 public:
  virtual ~distDataNull() {}
  void runCmd(result& /* _return */, const std::string& /* command */) {
    return;
  }
  void runCmdWParms(result& /* _return */, const execWParms& /* command */) {
    return;
  }
  int32_t ping() {
    int32_t _return = 0;
    return _return;
  }
  void listFilesDir(directory& /* _return */, const std::string& /* DirPath */, const std::string& /* workingDir */) {
    return;
  }
  void mvFile(result& /* _return */, const std::string& /* FileName */, const std::string& /* workingDir */, const std::string& /* newFile */) {
    return;
  }
};

typedef struct _distData_runCmd_args__isset {
  _distData_runCmd_args__isset() : command(false) {}
  bool command :1;
} _distData_runCmd_args__isset;

class distData_runCmd_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  distData_runCmd_args(const distData_runCmd_args&);
  distData_runCmd_args& operator=(const distData_runCmd_args&);
  distData_runCmd_args() : command() {
  }

  virtual ~distData_runCmd_args() throw();
  std::string command;

  _distData_runCmd_args__isset __isset;

  void __set_command(const std::string& val);

  bool operator == (const distData_runCmd_args & rhs) const
  {
    if (!(command == rhs.command))
      return false;
    return true;
  }
  bool operator != (const distData_runCmd_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const distData_runCmd_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const distData_runCmd_args& obj);
};


class distData_runCmd_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~distData_runCmd_pargs() throw();
  const std::string* command;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const distData_runCmd_pargs& obj);
};

typedef struct _distData_runCmd_result__isset {
  _distData_runCmd_result__isset() : success(false) {}
  bool success :1;
} _distData_runCmd_result__isset;

class distData_runCmd_result {
 public:

  static const char* ascii_fingerprint; // = "7594CD480F0FD6446C1F86AF337760B3";
  static const uint8_t binary_fingerprint[16]; // = {0x75,0x94,0xCD,0x48,0x0F,0x0F,0xD6,0x44,0x6C,0x1F,0x86,0xAF,0x33,0x77,0x60,0xB3};

  distData_runCmd_result(const distData_runCmd_result&);
  distData_runCmd_result& operator=(const distData_runCmd_result&);
  distData_runCmd_result() {
  }

  virtual ~distData_runCmd_result() throw();
  result success;

  _distData_runCmd_result__isset __isset;

  void __set_success(const result& val);

  bool operator == (const distData_runCmd_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const distData_runCmd_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const distData_runCmd_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const distData_runCmd_result& obj);
};

typedef struct _distData_runCmd_presult__isset {
  _distData_runCmd_presult__isset() : success(false) {}
  bool success :1;
} _distData_runCmd_presult__isset;

class distData_runCmd_presult {
 public:

  static const char* ascii_fingerprint; // = "7594CD480F0FD6446C1F86AF337760B3";
  static const uint8_t binary_fingerprint[16]; // = {0x75,0x94,0xCD,0x48,0x0F,0x0F,0xD6,0x44,0x6C,0x1F,0x86,0xAF,0x33,0x77,0x60,0xB3};


  virtual ~distData_runCmd_presult() throw();
  result* success;

  _distData_runCmd_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const distData_runCmd_presult& obj);
};

typedef struct _distData_runCmdWParms_args__isset {
  _distData_runCmdWParms_args__isset() : command(false) {}
  bool command :1;
} _distData_runCmdWParms_args__isset;

class distData_runCmdWParms_args {
 public:

  static const char* ascii_fingerprint; // = "BD5CBA271C2E4F5AECE4D0971E54C84F";
  static const uint8_t binary_fingerprint[16]; // = {0xBD,0x5C,0xBA,0x27,0x1C,0x2E,0x4F,0x5A,0xEC,0xE4,0xD0,0x97,0x1E,0x54,0xC8,0x4F};

  distData_runCmdWParms_args(const distData_runCmdWParms_args&);
  distData_runCmdWParms_args& operator=(const distData_runCmdWParms_args&);
  distData_runCmdWParms_args() {
  }

  virtual ~distData_runCmdWParms_args() throw();
  execWParms command;

  _distData_runCmdWParms_args__isset __isset;

  void __set_command(const execWParms& val);

  bool operator == (const distData_runCmdWParms_args & rhs) const
  {
    if (!(command == rhs.command))
      return false;
    return true;
  }
  bool operator != (const distData_runCmdWParms_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const distData_runCmdWParms_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const distData_runCmdWParms_args& obj);
};


class distData_runCmdWParms_pargs {
 public:

  static const char* ascii_fingerprint; // = "BD5CBA271C2E4F5AECE4D0971E54C84F";
  static const uint8_t binary_fingerprint[16]; // = {0xBD,0x5C,0xBA,0x27,0x1C,0x2E,0x4F,0x5A,0xEC,0xE4,0xD0,0x97,0x1E,0x54,0xC8,0x4F};


  virtual ~distData_runCmdWParms_pargs() throw();
  const execWParms* command;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const distData_runCmdWParms_pargs& obj);
};

typedef struct _distData_runCmdWParms_result__isset {
  _distData_runCmdWParms_result__isset() : success(false) {}
  bool success :1;
} _distData_runCmdWParms_result__isset;

class distData_runCmdWParms_result {
 public:

  static const char* ascii_fingerprint; // = "7594CD480F0FD6446C1F86AF337760B3";
  static const uint8_t binary_fingerprint[16]; // = {0x75,0x94,0xCD,0x48,0x0F,0x0F,0xD6,0x44,0x6C,0x1F,0x86,0xAF,0x33,0x77,0x60,0xB3};

  distData_runCmdWParms_result(const distData_runCmdWParms_result&);
  distData_runCmdWParms_result& operator=(const distData_runCmdWParms_result&);
  distData_runCmdWParms_result() {
  }

  virtual ~distData_runCmdWParms_result() throw();
  result success;

  _distData_runCmdWParms_result__isset __isset;

  void __set_success(const result& val);

  bool operator == (const distData_runCmdWParms_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const distData_runCmdWParms_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const distData_runCmdWParms_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const distData_runCmdWParms_result& obj);
};

typedef struct _distData_runCmdWParms_presult__isset {
  _distData_runCmdWParms_presult__isset() : success(false) {}
  bool success :1;
} _distData_runCmdWParms_presult__isset;

class distData_runCmdWParms_presult {
 public:

  static const char* ascii_fingerprint; // = "7594CD480F0FD6446C1F86AF337760B3";
  static const uint8_t binary_fingerprint[16]; // = {0x75,0x94,0xCD,0x48,0x0F,0x0F,0xD6,0x44,0x6C,0x1F,0x86,0xAF,0x33,0x77,0x60,0xB3};


  virtual ~distData_runCmdWParms_presult() throw();
  result* success;

  _distData_runCmdWParms_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const distData_runCmdWParms_presult& obj);
};


class distData_ping_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  distData_ping_args(const distData_ping_args&);
  distData_ping_args& operator=(const distData_ping_args&);
  distData_ping_args() {
  }

  virtual ~distData_ping_args() throw();

  bool operator == (const distData_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const distData_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const distData_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const distData_ping_args& obj);
};


class distData_ping_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~distData_ping_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const distData_ping_pargs& obj);
};

typedef struct _distData_ping_result__isset {
  _distData_ping_result__isset() : success(false) {}
  bool success :1;
} _distData_ping_result__isset;

class distData_ping_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  distData_ping_result(const distData_ping_result&);
  distData_ping_result& operator=(const distData_ping_result&);
  distData_ping_result() : success(0) {
  }

  virtual ~distData_ping_result() throw();
  int32_t success;

  _distData_ping_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const distData_ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const distData_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const distData_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const distData_ping_result& obj);
};

typedef struct _distData_ping_presult__isset {
  _distData_ping_presult__isset() : success(false) {}
  bool success :1;
} _distData_ping_presult__isset;

class distData_ping_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~distData_ping_presult() throw();
  int32_t* success;

  _distData_ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const distData_ping_presult& obj);
};

typedef struct _distData_listFilesDir_args__isset {
  _distData_listFilesDir_args__isset() : DirPath(false), workingDir(true) {}
  bool DirPath :1;
  bool workingDir :1;
} _distData_listFilesDir_args__isset;

class distData_listFilesDir_args {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  distData_listFilesDir_args(const distData_listFilesDir_args&);
  distData_listFilesDir_args& operator=(const distData_listFilesDir_args&);
  distData_listFilesDir_args() : DirPath(), workingDir("") {
  }

  virtual ~distData_listFilesDir_args() throw();
  std::string DirPath;
  std::string workingDir;

  _distData_listFilesDir_args__isset __isset;

  void __set_DirPath(const std::string& val);

  void __set_workingDir(const std::string& val);

  bool operator == (const distData_listFilesDir_args & rhs) const
  {
    if (!(DirPath == rhs.DirPath))
      return false;
    if (!(workingDir == rhs.workingDir))
      return false;
    return true;
  }
  bool operator != (const distData_listFilesDir_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const distData_listFilesDir_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const distData_listFilesDir_args& obj);
};


class distData_listFilesDir_pargs {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};


  virtual ~distData_listFilesDir_pargs() throw();
  const std::string* DirPath;
  const std::string* workingDir;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const distData_listFilesDir_pargs& obj);
};

typedef struct _distData_listFilesDir_result__isset {
  _distData_listFilesDir_result__isset() : success(false) {}
  bool success :1;
} _distData_listFilesDir_result__isset;

class distData_listFilesDir_result {
 public:

  static const char* ascii_fingerprint; // = "0174E45814A159CC96B8293CB5278F0E";
  static const uint8_t binary_fingerprint[16]; // = {0x01,0x74,0xE4,0x58,0x14,0xA1,0x59,0xCC,0x96,0xB8,0x29,0x3C,0xB5,0x27,0x8F,0x0E};

  distData_listFilesDir_result(const distData_listFilesDir_result&);
  distData_listFilesDir_result& operator=(const distData_listFilesDir_result&);
  distData_listFilesDir_result() {
  }

  virtual ~distData_listFilesDir_result() throw();
  directory success;

  _distData_listFilesDir_result__isset __isset;

  void __set_success(const directory& val);

  bool operator == (const distData_listFilesDir_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const distData_listFilesDir_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const distData_listFilesDir_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const distData_listFilesDir_result& obj);
};

typedef struct _distData_listFilesDir_presult__isset {
  _distData_listFilesDir_presult__isset() : success(false) {}
  bool success :1;
} _distData_listFilesDir_presult__isset;

class distData_listFilesDir_presult {
 public:

  static const char* ascii_fingerprint; // = "0174E45814A159CC96B8293CB5278F0E";
  static const uint8_t binary_fingerprint[16]; // = {0x01,0x74,0xE4,0x58,0x14,0xA1,0x59,0xCC,0x96,0xB8,0x29,0x3C,0xB5,0x27,0x8F,0x0E};


  virtual ~distData_listFilesDir_presult() throw();
  directory* success;

  _distData_listFilesDir_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const distData_listFilesDir_presult& obj);
};

typedef struct _distData_mvFile_args__isset {
  _distData_mvFile_args__isset() : FileName(false), workingDir(true), newFile(false) {}
  bool FileName :1;
  bool workingDir :1;
  bool newFile :1;
} _distData_mvFile_args__isset;

class distData_mvFile_args {
 public:

  static const char* ascii_fingerprint; // = "AB879940BD15B6B25691265F7384B271";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};

  distData_mvFile_args(const distData_mvFile_args&);
  distData_mvFile_args& operator=(const distData_mvFile_args&);
  distData_mvFile_args() : FileName(), workingDir(""), newFile() {
  }

  virtual ~distData_mvFile_args() throw();
  std::string FileName;
  std::string workingDir;
  std::string newFile;

  _distData_mvFile_args__isset __isset;

  void __set_FileName(const std::string& val);

  void __set_workingDir(const std::string& val);

  void __set_newFile(const std::string& val);

  bool operator == (const distData_mvFile_args & rhs) const
  {
    if (!(FileName == rhs.FileName))
      return false;
    if (!(workingDir == rhs.workingDir))
      return false;
    if (!(newFile == rhs.newFile))
      return false;
    return true;
  }
  bool operator != (const distData_mvFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const distData_mvFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const distData_mvFile_args& obj);
};


class distData_mvFile_pargs {
 public:

  static const char* ascii_fingerprint; // = "AB879940BD15B6B25691265F7384B271";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};


  virtual ~distData_mvFile_pargs() throw();
  const std::string* FileName;
  const std::string* workingDir;
  const std::string* newFile;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const distData_mvFile_pargs& obj);
};

typedef struct _distData_mvFile_result__isset {
  _distData_mvFile_result__isset() : success(false) {}
  bool success :1;
} _distData_mvFile_result__isset;

class distData_mvFile_result {
 public:

  static const char* ascii_fingerprint; // = "7594CD480F0FD6446C1F86AF337760B3";
  static const uint8_t binary_fingerprint[16]; // = {0x75,0x94,0xCD,0x48,0x0F,0x0F,0xD6,0x44,0x6C,0x1F,0x86,0xAF,0x33,0x77,0x60,0xB3};

  distData_mvFile_result(const distData_mvFile_result&);
  distData_mvFile_result& operator=(const distData_mvFile_result&);
  distData_mvFile_result() {
  }

  virtual ~distData_mvFile_result() throw();
  result success;

  _distData_mvFile_result__isset __isset;

  void __set_success(const result& val);

  bool operator == (const distData_mvFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const distData_mvFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const distData_mvFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const distData_mvFile_result& obj);
};

typedef struct _distData_mvFile_presult__isset {
  _distData_mvFile_presult__isset() : success(false) {}
  bool success :1;
} _distData_mvFile_presult__isset;

class distData_mvFile_presult {
 public:

  static const char* ascii_fingerprint; // = "7594CD480F0FD6446C1F86AF337760B3";
  static const uint8_t binary_fingerprint[16]; // = {0x75,0x94,0xCD,0x48,0x0F,0x0F,0xD6,0x44,0x6C,0x1F,0x86,0xAF,0x33,0x77,0x60,0xB3};


  virtual ~distData_mvFile_presult() throw();
  result* success;

  _distData_mvFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const distData_mvFile_presult& obj);
};

class distDataClient : virtual public distDataIf {
 public:
  distDataClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  distDataClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void runCmd(result& _return, const std::string& command);
  void send_runCmd(const std::string& command);
  void recv_runCmd(result& _return);
  void runCmdWParms(result& _return, const execWParms& command);
  void send_runCmdWParms(const execWParms& command);
  void recv_runCmdWParms(result& _return);
  int32_t ping();
  void send_ping();
  int32_t recv_ping();
  void listFilesDir(directory& _return, const std::string& DirPath, const std::string& workingDir);
  void send_listFilesDir(const std::string& DirPath, const std::string& workingDir);
  void recv_listFilesDir(directory& _return);
  void mvFile(result& _return, const std::string& FileName, const std::string& workingDir, const std::string& newFile);
  void send_mvFile(const std::string& FileName, const std::string& workingDir, const std::string& newFile);
  void recv_mvFile(result& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class distDataProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<distDataIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (distDataProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_runCmd(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_runCmdWParms(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_listFilesDir(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_mvFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  distDataProcessor(boost::shared_ptr<distDataIf> iface) :
    iface_(iface) {
    processMap_["runCmd"] = &distDataProcessor::process_runCmd;
    processMap_["runCmdWParms"] = &distDataProcessor::process_runCmdWParms;
    processMap_["ping"] = &distDataProcessor::process_ping;
    processMap_["listFilesDir"] = &distDataProcessor::process_listFilesDir;
    processMap_["mvFile"] = &distDataProcessor::process_mvFile;
  }

  virtual ~distDataProcessor() {}
};

class distDataProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  distDataProcessorFactory(const ::boost::shared_ptr< distDataIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< distDataIfFactory > handlerFactory_;
};

class distDataMultiface : virtual public distDataIf {
 public:
  distDataMultiface(std::vector<boost::shared_ptr<distDataIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~distDataMultiface() {}
 protected:
  std::vector<boost::shared_ptr<distDataIf> > ifaces_;
  distDataMultiface() {}
  void add(boost::shared_ptr<distDataIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void runCmd(result& _return, const std::string& command) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->runCmd(_return, command);
    }
    ifaces_[i]->runCmd(_return, command);
    return;
  }

  void runCmdWParms(result& _return, const execWParms& command) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->runCmdWParms(_return, command);
    }
    ifaces_[i]->runCmdWParms(_return, command);
    return;
  }

  int32_t ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    return ifaces_[i]->ping();
  }

  void listFilesDir(directory& _return, const std::string& DirPath, const std::string& workingDir) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->listFilesDir(_return, DirPath, workingDir);
    }
    ifaces_[i]->listFilesDir(_return, DirPath, workingDir);
    return;
  }

  void mvFile(result& _return, const std::string& FileName, const std::string& workingDir, const std::string& newFile) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->mvFile(_return, FileName, workingDir, newFile);
    }
    ifaces_[i]->mvFile(_return, FileName, workingDir, newFile);
    return;
  }

};

} // namespace

#endif
